# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- main

variables:
  buildConfiguration: 'Release'
  dotnetSdkVersion: '3.1.x'

pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: Build
  displayName: 'Build Application Code'
  jobs:
  - job: 'Build'    
    steps:
    - template: 'deploy/templates/build.yaml'

- stage: Dev
  displayName: 'Deploy to Azure App Service'
  dependsOn: Build
  jobs:
    - deployment: Provision
      displayName: 'Provision Azure Resources'
      variables:
      - group: Release
      environment: 'todoapp-dev'
      condition: eq(1,1)
      strategy:
        runOnce:
          deploy:
            steps:
              - template: 'deploy/templates/provision-az-webapp.yaml'
                parameters:
                  environment: 'dev'

    - deployment: MigrateDB
      displayName: 'Run Database Migration'
      variables:
      - name: sqlserverfqdn
        value: $[ dependencies.Provision.outputs['Provision.RunTerraform.sqlserverfqdn'] ]
      - group: Release
      condition: eq(1,2)
      dependsOn: Provision
      environment: 'todoapp-dev'
      pool:
        vmImage: 'windows-latest'
      strategy:
        runOnce:
          deploy:
            steps:
              - script: echo $(sqlserverfqdn)
              - template: 'deploy/templates/migrate-db.yaml'
                parameters:
                  environment: 'dev'
                  sqlserverfqdn: $(sqlserverfqdn)
        
    - deployment: Deploy
      displayName: 'Deploy Application'
      condition: eq(1,2)
      dependsOn: Provision
      environment: 'todoapp-dev'
      variables:
      - name: sqlserverfqdn
        value: $[ dependencies.Provision.outputs['Provision.RunTerraform.sqlserverfqdn'] ]
      - name: webappname
        value: $[ dependencies.Provision.outputs['Provision.RunTerraform.webappname'] ]
      - group: Release
      strategy:
        runOnce:
          deploy:
            steps:
              - script: echo $(webappname) $(sqlserverfqdn)
              - template: 'deploy/templates/deploy-app.yaml'
                parameters:
                  environment: 'dev'
                  webappname: $(webappname)
                  sqlserverfqdn: $(sqlserverfqdn)

- stage: Kubernetes
  displayName: 'Deploy to Azure kubernetes cluster'
  dependsOn: Build
  variables:
    - name: DbServer
      value: $[ dependencies.Dev.outputs['Provision.RunTerraform.sqlserverfqdn'] ]
  jobs:    
    - deployment: Deploy
      displayName: 'Apply kubernetes manifests'
      condition: eq(1,1)
      environment: 'todoapp-dev'
      variables:
        - group: Release
      strategy:
        runOnce:
          deploy:
            steps:
              - script: echo DbServer $(DbServer)
                displayName: 'Print Variables'

              - task: replacetokens@3
                displayName: Replace tokens in yaml files
                inputs:
                  rootDirectory: $(Pipeline.Workspace)/drop/deploy/kubernetes
                  targetFiles: '**/*.yml'
                  encoding: 'auto'
                  writeBOM: true
                  actionOnMissing: 'fail'
                  keepToken: false
                  tokenPrefix: '__'
                  tokenSuffix: '__'
                  useLegacyPattern: false
                  enableTelemetry: false
              
              - template: 'deploy/templates/deploy-k8s.yaml'
