steps:
  - task: UseDotNet@2
    displayName: 'Use .NET Core sdk $(dotnetSdkVersion)'
    inputs:
      version: '$(dotnetSdkVersion)'

  - task: DotNetCoreCLI@2
    displayName: 'Restore'
    inputs:
      command: 'restore'
      projects: '**/*.csproj'

  - task: DotNetCoreCLI@2
    displayName: 'Build'
    inputs:
      command: 'build'
      projects: '**/*.csproj'
      arguments: '--configuration $(BuildConfiguration) --no-restore'
  
  - task: DotNetCoreCLI@2
    displayName: 'Publish & Zip'
    inputs:
      command: 'publish'
      publishWebProjects: false
      projects: |
        src/TodoApp/*.csproj
      arguments: '--no-build --configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
      zipAfterPublish: true

  - script: dotnet ef migrations script --no-build --no-color  --output $(Build.ArtifactStagingDirectory)/dbmigration.sql --context TodoAppContext  --idempotent
    displayName: Generate DB Migration script
    workingDirectory: $(Agent.BuildDirectory)/src/TodoApp

  - script: cp -r $(Build.BuildDirectory)/deploy $(Build.ArtifactStagingDirectory)
    displayName: Copy Deployment Files
  
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Release Artifacts'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: 'drop'
      publishLocation: 'Container'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish DB Migration Script'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)/dbmigration.sql'
      ArtifactName: 'drop'
      publishLocation: 'Container'  

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Deployment Artifacts'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)/deploy'
      ArtifactName: 'deploy'
      publishLocation: 'Container' 